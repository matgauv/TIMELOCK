#pragma once

// internal
#include "../../common.hpp"

// stlib
#include <vector>
#include <random>

#define SDL_MAIN_HANDLED
#include <SDL.h>
#include <SDL_mixer.h>

#include "../rendering/render_system.hpp"

// Container for all our entities and game logic.
// Individual rendering / updates are deferred to the update() methods.
class WorldSystem : public ISystem
{
public:
	WorldSystem();

	// starts the game
	void init(GLFWwindow* window) override;

	// steps the game ahead by ms milliseconds
	void step(float elapsed_ms) override;

	// steps the game ahead, runs after all other components have stepped
	void late_step(float elapsed_ms) override;

	// releases all associated resources
	~WorldSystem();

	// Getter for the GameState entity
	Entity getGameStateEntity() { return game_state_entity; }

private:
	// starts and loads music and sound effects
	bool start_and_load_sounds();
	// check for collisions generated by the physics system
	void handle_collisions();

	// activates accleration
	void activate_acceleration();

	// deactivate acceleration
	void deactivate_acceleration();
	
	// activates deceleration
	void activate_deceleration();

	// deactivate deceleration
	void deactivate_deceleration();

	void player_walking(bool walking, bool is_left);
	void player_jump();

	void handle_player_object_collision(Entity player_entity, Entity object_entity, Collision collision, bool* playerIsGrounded);
	
	void handle_player_attack_collision(Entity player_entity, Entity attack_entity, Collision collision);
	void handle_player_boss_collision(Entity player_entity, Entity boss_entity, Collision collision);

	float mouse_pos_x = 0.0f;
	float mouse_pos_y = 0.0f;

	// input callback functions
	void on_key(int key, int, int action, int mod);
	void on_mouse_move(vec2 pos);
	void on_mouse_button_pressed(int button, int action, int mods);

	// restart level
	void restart_game();

	// GameState entity
	Entity game_state_entity;

	// OpenGL window handle
	GLFWwindow* window;

	// Game state
	float current_speed;

	// music references
	Mix_Music* background_music;

	// C++ random number generator
	std::default_random_engine rng;
	std::uniform_real_distribution<float> uniform_dist; // number between 0..1
};
